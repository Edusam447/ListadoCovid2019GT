/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;

import Clases.ArbolAVL;
import Clases.ArbolBinario;
import Clases.NodoPersona;
import java.io.BufferedReader;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.text.DecimalFormat;
import proyectofinalcovid.ProyectoFinalCovid;

/**
 *
 * @author Edu
 */
public class FormPrincipal extends javax.swing.JFrame {
    public ArbolBinario arbol;
    public ArbolAVL arbolAVL;
    double contadorNodos;
    private static final DecimalFormat df = new DecimalFormat("#");
    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        arbol = new ArbolBinario();
        arbolAVL = new ArbolAVL();
        contadorNodos = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botonSeleccion = new javax.swing.JButton();
        botonMostrar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonAñadir = new javax.swing.JButton();
        botonActualizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        botonGuardarArchivo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        botonSeleccionAVL = new javax.swing.JButton();
        botonMostrarAVL = new javax.swing.JButton();
        botonEliminarAVL = new javax.swing.JButton();
        botonAñadirAVL = new javax.swing.JButton();
        botonActualizarAVL = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        botonGuardarArchivo1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setForeground(new java.awt.Color(153, 255, 255));

        botonSeleccion.setText("Seleccionar archivo");
        botonSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionActionPerformed(evt);
            }
        });

        botonMostrar.setText("Mostrar datos");
        botonMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarActionPerformed(evt);
            }
        });

        botonEliminar.setText("Eliminar nodo");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonAñadir.setText("Anadir nodo al arbol");
        botonAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirActionPerformed(evt);
            }
        });

        botonActualizar.setText("Actualizar nodo");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Arbol Binario");

        botonGuardarArchivo.setText("Guardar en Archivo");
        botonGuardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(botonAñadir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonMostrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonGuardarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(botonAñadir)
                .addGap(18, 18, 18)
                .addComponent(botonSeleccion)
                .addGap(17, 17, 17)
                .addComponent(botonMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonGuardarArchivo)
                .addGap(18, 18, 18)
                .addComponent(botonActualizar)
                .addGap(17, 17, 17)
                .addComponent(botonEliminar)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setForeground(new java.awt.Color(153, 255, 255));

        botonSeleccionAVL.setText("Seleccionar archivo");
        botonSeleccionAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionAVLActionPerformed(evt);
            }
        });

        botonMostrarAVL.setText("Mostrar datos");
        botonMostrarAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarAVLActionPerformed(evt);
            }
        });

        botonEliminarAVL.setText("Eliminar nodo");
        botonEliminarAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarAVLActionPerformed(evt);
            }
        });

        botonAñadirAVL.setText("Anadir nodo al arbol");
        botonAñadirAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirAVLActionPerformed(evt);
            }
        });

        botonActualizarAVL.setText("Actualizar nodo");
        botonActualizarAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarAVLActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Arbol AVL");

        botonGuardarArchivo1.setText("Guardar en Archivo");
        botonGuardarArchivo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarArchivo1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonGuardarArchivo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonAñadirAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonMostrarAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonSeleccionAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonActualizarAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonEliminarAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(14, 14, 14)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel2)
                .addGap(35, 35, 35)
                .addComponent(botonAñadirAVL)
                .addGap(18, 18, 18)
                .addComponent(botonSeleccionAVL)
                .addGap(17, 17, 17)
                .addComponent(botonMostrarAVL)
                .addGap(18, 18, 18)
                .addComponent(botonGuardarArchivo1)
                .addGap(18, 18, 18)
                .addComponent(botonActualizarAVL)
                .addGap(17, 17, 17)
                .addComponent(botonEliminarAVL)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionActionPerformed
        
        //Opcion ingresar solo unos cuantos nodos o todos los nodos
        String[] options = {"Ingresar cantidad específica", "Ingresar todos los nodos"};
        int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de Ingreso",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        int cantidad = 0;
        boolean validInput = false;
        
        
        //Validacion solo numeros y no texto
        if (option == 0) {
            while (!validInput) {
                try {
                    String input = JOptionPane.showInputDialog(null, "¿Cuántos nodos desea ingresar?", "Ingreso", JOptionPane.QUESTION_MESSAGE);
                    if (input == null) {
                        //El usuario presionó cancelar
                        return;
                    }
                    cantidad = Integer.parseInt(input);
                    validInput = true; //La entrada es válida
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        //Escogencia del archivo txt
        JFileChooser escogerArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto (.txt)", "txt");
        escogerArchivo.setFileFilter(filtro);
        int valorRetornado = escogerArchivo.showOpenDialog(null);
        if (valorRetornado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = escogerArchivo.getSelectedFile();
            try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
                String linea;
                int contador = 0;
                while ((linea = br.readLine()) != null) {
                    if (option == 0 && contador >= cantidad) {
                        break;
                    }
                    String[] partes = separarDatos(linea);
                    if (partes != null) {
                        String nombre = partes[0];
                        double dpi = Double.parseDouble(partes[1]);
                        String departamento = partes.length > 2 ? partes[2] : null;
                        String municipio = partes.length > 3 ? partes[3] : null;
                        String lugarVacunacion = partes.length > 4 ? partes[4] : null;
                        int cDosis = partes.length > 5 ? Integer.parseInt(partes[5]) : 0;
                        String dVacuna1 = partes.length > 6 ? partes[6] : null;
                        String dVacuna2 = partes.length > 7 ? partes[7] : null;
                        String dVacuna3 = partes.length > 8 ? partes[8] : null;

                        ArbolBinario.AgregarNodo(nombre, departamento, municipio, lugarVacunacion, dpi, cDosis, dVacuna1, dVacuna2, dVacuna3);
                        contadorNodos++;
                    }
                }
                JOptionPane.showMessageDialog(null, "Datos ingresados correctamente en el árbol.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    } 
    
   private static String[] separarDatos(String linea) {
    // Expresión regular para separar el nombre, DPI y otros campos
        Pattern pattern = Pattern.compile("(.+?)\\s+(\\d+)(.*)");
        Matcher matcher = pattern.matcher(linea);
         if (matcher.matches()) {
        String nombre = matcher.group(1).trim();
        String dpi = matcher.group(2).trim();
        String[] otrosDatos = matcher.group(3).trim().split("\\s+");

        String departamento = otrosDatos.length > 0 ? otrosDatos[0] : null;
        String municipio = otrosDatos.length > 1 ? otrosDatos[1] : null;
        String lugarVacunacion = otrosDatos.length > 2 ? otrosDatos[2] : null;
        int cDosis = otrosDatos.length > 3 ? Integer.parseInt(otrosDatos[3]) : 0;
        String dVacuna1 = otrosDatos.length > 4 ? otrosDatos[4] : null;
        String dVacuna2 = otrosDatos.length > 5 ? otrosDatos[5] : null;
        String dVacuna3 = otrosDatos.length > 6 ? otrosDatos[6] : null;

        return new String[]{nombre, dpi, departamento, municipio, lugarVacunacion, String.valueOf(cDosis), dVacuna1, dVacuna2, dVacuna3};
    }
    return null;   
    }//GEN-LAST:event_botonSeleccionActionPerformed

    private void botonMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarActionPerformed
        MostrarTablaBinario tabla = new MostrarTablaBinario();
        System.out.println(" ");
        if (!arbol.EstaVacio()) {
            tabla.setVisible(true);
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Arbol vacio", "Arbol Binario", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_botonMostrarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        double numero;
        if(!arbol.EstaVacio()){
            numero = Double.parseDouble(JOptionPane.showInputDialog(null,"Ingresa el Numero del Nodo a Eliminar...", "Eliminando un Nodo", JOptionPane.QUESTION_MESSAGE));  
                   if (arbol.EliminarNodo(numero)==false){
                                   JOptionPane.showMessageDialog(null, "El Nodo a Eliminar no se encuentra en el Arbol","Nodo no Encontrado",JOptionPane.INFORMATION_MESSAGE);
                               }else{
                                   JOptionPane.showMessageDialog(null, "El Nodo ha sido eliminado del Arbol","Nodo Eliminado",JOptionPane.INFORMATION_MESSAGE);
                           }
        }else{
                                JOptionPane.showMessageDialog(null, "El Arbol esta vacio","Error",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        ActualizarNodoBinario act = new ActualizarNodoBinario();
        act.diferenciador = 0;
        this.setVisible(false);
        act.setVisible(true);
    }//GEN-LAST:event_botonActualizarActionPerformed

    private void botonAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirActionPerformed
        AgregarNodoForm agr = new AgregarNodoForm();
        agr.diferenciador = 0;
        this.setVisible(false);
        agr.setVisible(true);
    }//GEN-LAST:event_botonAñadirActionPerformed

    private void botonSeleccionAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionAVLActionPerformed

        //Opcion ingresar solo unos cuantos nodos o todos los nodos
        String[] options = {"Ingresar cantidad específica", "Ingresar todos los nodos"};
        int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de Ingreso",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        int cantidad = 0;
        boolean validInput = false;
        
        
        //Validacion solo numeros y no texto
        if (option == 0) {
            while (!validInput) {
                try {
                    String input = JOptionPane.showInputDialog(null, "¿Cuántos nodos desea ingresar?", "Ingreso", JOptionPane.QUESTION_MESSAGE);
                    if (input == null) {
                        //El usuario presionó cancelar
                        return;
                    }
                    cantidad = Integer.parseInt(input);
                    validInput = true; // La entrada es válida
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        //Escogencia del archivo txt
        JFileChooser escogerArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto (.txt)", "txt");
        escogerArchivo.setFileFilter(filtro);
        int valorRetornado = escogerArchivo.showOpenDialog(null);
        if (valorRetornado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = escogerArchivo.getSelectedFile();
            try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
                String linea;
                int contador = 0;
                while ((linea = br.readLine()) != null) {
                    if (option == 0 && contador >= cantidad) {
                        break;
                    }
                    String[] partes = separarDatos(linea);
                    if (partes != null) {
                        String nombre = partes[0];
                        double dpi = Double.parseDouble(partes[1]);
                        String departamento = partes.length > 2 ? partes[2] : null;
                        String municipio = partes.length > 3 ? partes[3] : null;
                        String lugarVacunacion = partes.length > 4 ? partes[4] : null;
                        int cDosis = partes.length > 5 ? Integer.parseInt(partes[5]) : 0;
                        String dVacuna1 = partes.length > 6 ? partes[6] : null;
                        String dVacuna2 = partes.length > 7 ? partes[7] : null;
                        String dVacuna3 = partes.length > 8 ? partes[8] : null;

                        ArbolBinario.AgregarNodo(nombre, departamento, municipio, lugarVacunacion, dpi, cDosis, dVacuna1, dVacuna2, dVacuna3); 
                        contadorNodos++;
                    }
                }
                JOptionPane.showMessageDialog(null, "Datos ingresados correctamente en el árbol.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }        
    }//GEN-LAST:event_botonSeleccionAVLActionPerformed
 
         /*private void botonBuscarAVLActionPerformed(java.awt.event.ActionEvent evt) {                                               
       double numero;
        if (!arbolAVL.EstaVacio()){
                            numero = Double.parseDouble(JOptionPane.showInputDialog(null,"Ingrese el numero del nodo a buscar...","Buscando un Nodo",JOptionPane.QUESTION_MESSAGE));
                            NodoPersona tmp;
                            tmp = arbolAVL.BuscarNodo(numero);
                            if (tmp==null){
                                JOptionPane.showMessageDialog(null,"El nodo buscado no se encuentra en el arbol","Nodo No Encontrado",JOptionPane.INFORMATION_MESSAGE);
                            }else{
                                System.out.println("Persona encontrada, sus datos son: " + tmp.getNombre() + ", DPI:  " + df.format(tmp.getDpi()));
                            }
                        }else{
                            JOptionPane.showMessageDialog(null,"El Arbol esta vacio","Error",JOptionPane.INFORMATION_MESSAGE);
                        }
    }          */
    
    private void botonMostrarAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarAVLActionPerformed
       MostrarTablaAVL tablaAVL = new MostrarTablaAVL();
        System.out.println(" ");
        if (!arbolAVL.EstaVacio()) {
            tablaAVL.setVisible(true);
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Arbol vacio", "Arbol Binario", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonMostrarAVLActionPerformed

    private void botonEliminarAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarAVLActionPerformed
        double numero;
        if(!arbolAVL.EstaVacio()){
            numero = Double.parseDouble(JOptionPane.showInputDialog(null,"Ingresa el Numero del Nodo a Eliminar...", "Eliminando un Nodo", JOptionPane.QUESTION_MESSAGE));  
                   if (arbolAVL.EliminarNodo(numero)==false){
                                   JOptionPane.showMessageDialog(null, "El Nodo a Eliminar no se encuentra en el Arbol","Nodo no Encontrado",JOptionPane.INFORMATION_MESSAGE);
                               }else{
                                   JOptionPane.showMessageDialog(null, "El Nodo ha sido eliminado del Arbol","Nodo Eliminado",JOptionPane.INFORMATION_MESSAGE);
                           }
        }else{
                                JOptionPane.showMessageDialog(null, "El Arbol esta vacio","Error",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_botonEliminarAVLActionPerformed

    private void botonAñadirAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirAVLActionPerformed
       AgregarNodoForm agr = new AgregarNodoForm();
        agr.diferenciador = 1;
        this.setVisible(false);
        agr.setVisible(true);
    }//GEN-LAST:event_botonAñadirAVLActionPerformed

    private void botonActualizarAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarAVLActionPerformed
        ActualizarNodoBinario act = new ActualizarNodoBinario();
        act.diferenciador = 1;
        this.setVisible(false);
        act.setVisible(true);
    }//GEN-LAST:event_botonActualizarAVLActionPerformed

    private void botonGuardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarArchivoActionPerformed
        String[] options = {"Ingresar en PreOrden", "Ingresar en InOrden", "Ingresar en PostOrden"};
        int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de Ingreso a archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        
        switch(option){
            case 0:
                arbol.guardarEnArchivoPreOrden("arbol_binariol_preorden.txt");
                break;
                case 1:
                arbol.guardarEnArchivoInOrden("arbol_binariol_inorden.txt");
                break;
                case 2  :
                arbol.guardarEnArchivoPostOrden("arbol_binariol_postorden.txt");
                break;
        }
    }//GEN-LAST:event_botonGuardarArchivoActionPerformed

    private void botonGuardarArchivo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarArchivo1ActionPerformed
       String[] options = {"Ingresar en PreOrden", "Ingresar en InOrden", "Ingresar en PostOrden"};
        int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de Ingreso a archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        
        switch(option){
            case 0:
                arbolAVL.guardarEnArchivoPreOrden("arbolAVL_preorden.txt");
                break;
                case 1:
                arbolAVL.guardarEnArchivoInOrden("arbolAVL_inorden.txt");
                break;
                case 2  :
                arbolAVL.guardarEnArchivoPostOrden("arbolAVL_postorden.txt");
                break;
        }           
    }//GEN-LAST:event_botonGuardarArchivo1ActionPerformed

     /*private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        double numero;
        if (!arbol.EstaVacio()){
                            numero = Double.parseDouble(JOptionPane.showInputDialog(null,"Ingrese el numero del nodo a buscar...","Buscando un Nodo",JOptionPane.QUESTION_MESSAGE));
                            NodoPersona tmp;
                            tmp = arbol.BuscarNodo(numero);
                            if (tmp==null){
                                JOptionPane.showMessageDialog(null,"El nodo buscado no se encuentra en el arbol","Nodo No Encontrado",JOptionPane.INFORMATION_MESSAGE);
                            }else{
                                System.out.println("Persona encontrada, sus datos son: " + tmp.getNombre() + ", DPI:  " + df.format(tmp.getDpi()));
                            }
                        }else{
                            JOptionPane.showMessageDialog(null,"El Arbol esta vacio","Error",JOptionPane.INFORMATION_MESSAGE);
                        }
    } */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonActualizarAVL;
    private javax.swing.JButton botonAñadir;
    private javax.swing.JButton botonAñadirAVL;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonEliminarAVL;
    private javax.swing.JButton botonGuardarArchivo;
    private javax.swing.JButton botonGuardarArchivo1;
    private javax.swing.JButton botonMostrar;
    private javax.swing.JButton botonMostrarAVL;
    private javax.swing.JButton botonSeleccion;
    private javax.swing.JButton botonSeleccionAVL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
