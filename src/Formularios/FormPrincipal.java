/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;

import Clases.ArbolAVL;
import Clases.ArbolBinario;
import Clases.Compresor;
import Clases.Decompresor;
import Clases.NodoPersona;
import java.io.BufferedReader;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import proyectofinalcovid.ProyectoFinalCovid;

/**
 *
 * @author Edu
 */
public class FormPrincipal extends javax.swing.JFrame {
    public ArbolBinario arbol;
    public ArbolAVL arbolAVL;
    double contadorNodos;
    private static final DecimalFormat df = new DecimalFormat("#");
    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        arbol = new ArbolBinario();
        arbolAVL = new ArbolAVL();
        contadorNodos = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        botonSeleccionAVL = new javax.swing.JButton();
        botonMostrarAVL = new javax.swing.JButton();
        botonEliminarAVL = new javax.swing.JButton();
        botonAñadirAVL = new javax.swing.JButton();
        botonActualizarAVL = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        botonGuardarArchivoAVL = new javax.swing.JButton();
        botonEncriptarAVL = new javax.swing.JButton();
        botonComprimirAVL = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        botonEliminar = new javax.swing.JButton();
        botonActualizar = new javax.swing.JButton();
        botonGuardarArchivo = new javax.swing.JButton();
        botonMostrar = new javax.swing.JButton();
        botonSeleccion = new javax.swing.JButton();
        botonAñadir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        botonEncriptar = new javax.swing.JButton();
        botonComprimir = new javax.swing.JButton();
        jLabelFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setForeground(new java.awt.Color(153, 255, 255));

        botonSeleccionAVL.setText("Seleccionar archivo");
        botonSeleccionAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionAVLActionPerformed(evt);
            }
        });

        botonMostrarAVL.setText("Mostrar datos");
        botonMostrarAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarAVLActionPerformed(evt);
            }
        });

        botonEliminarAVL.setText("Eliminar nodo");
        botonEliminarAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarAVLActionPerformed(evt);
            }
        });

        botonAñadirAVL.setText("Anadir nodo al arbol");
        botonAñadirAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirAVLActionPerformed(evt);
            }
        });

        botonActualizarAVL.setText("Actualizar nodo");
        botonActualizarAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarAVLActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Arbol AVL");

        botonGuardarArchivoAVL.setText("Guardar en Archivo");
        botonGuardarArchivoAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarArchivoAVLActionPerformed(evt);
            }
        });

        botonEncriptarAVL.setText("Encriptar / Desencriptar");
        botonEncriptarAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEncriptarAVLActionPerformed(evt);
            }
        });

        botonComprimirAVL.setText("Comprimir / Descomprimir");
        botonComprimirAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonComprimirAVLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonMostrarAVL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonGuardarArchivoAVL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonActualizarAVL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonEliminarAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonAñadirAVL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonSeleccionAVL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonEncriptarAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonComprimirAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(botonAñadirAVL)
                .addGap(18, 18, 18)
                .addComponent(botonSeleccionAVL)
                .addGap(18, 18, 18)
                .addComponent(botonActualizarAVL)
                .addGap(18, 18, 18)
                .addComponent(botonEliminarAVL)
                .addGap(18, 18, 18)
                .addComponent(botonMostrarAVL)
                .addGap(18, 18, 18)
                .addComponent(botonGuardarArchivoAVL)
                .addGap(18, 18, 18)
                .addComponent(botonEncriptarAVL)
                .addGap(18, 18, 18)
                .addComponent(botonComprimirAVL)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, -1, 410));

        jPanel5.setBackground(new java.awt.Color(204, 255, 255));
        jPanel5.setForeground(new java.awt.Color(153, 255, 255));

        botonEliminar.setText("Eliminar nodo");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonActualizar.setText("Actualizar nodo");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        botonGuardarArchivo.setText("Guardar en Archivo");
        botonGuardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarArchivoActionPerformed(evt);
            }
        });

        botonMostrar.setText("Mostrar datos");
        botonMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarActionPerformed(evt);
            }
        });

        botonSeleccion.setText("Seleccionar archivo");
        botonSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionActionPerformed(evt);
            }
        });

        botonAñadir.setText("Anadir nodo al arbol");
        botonAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Arbol Binario");

        botonEncriptar.setText("Encriptar / Desencriptar");
        botonEncriptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEncriptarActionPerformed(evt);
            }
        });

        botonComprimir.setText("Comprimir / Descomprimir");
        botonComprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonComprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botonComprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonEncriptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonAñadir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonMostrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonGuardarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(679, 679, 679))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(botonAñadir)
                .addGap(18, 18, 18)
                .addComponent(botonSeleccion)
                .addGap(18, 18, 18)
                .addComponent(botonActualizar)
                .addGap(17, 17, 17)
                .addComponent(botonEliminar)
                .addGap(18, 18, 18)
                .addComponent(botonMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonGuardarArchivo)
                .addGap(18, 18, 18)
                .addComponent(botonEncriptar)
                .addGap(18, 18, 18)
                .addComponent(botonComprimir)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 410));

        jLabelFondo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/fondo.jpg"))); // NOI18N
        jPanel4.add(jLabelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, 420));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionActionPerformed
        
        //Opcion ingresar solo unos cuantos nodos o todos los nodos
      String[] options = {"Ingresar cantidad específica", "Ingresar todos los nodos"};
    int option = JOptionPane.showOptionDialog(null,
            "¿Qué acción desea realizar?",
            "Selección de Ingreso",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);

    int cantidad = 0;
    boolean validInput = false;

    if (option == 0) {
        while (!validInput) {
            try {
                String input = JOptionPane.showInputDialog(null, "¿Cuántos nodos desea ingresar?", "Ingreso", JOptionPane.QUESTION_MESSAGE);
                if (input == null) {
                    return;
                }
                cantidad = Integer.parseInt(input);
                validInput = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    JFileChooser escogerArchivo = new JFileChooser();
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto (.txt)", "txt");
    escogerArchivo.setFileFilter(filtro);
    int valorRetornado = escogerArchivo.showOpenDialog(null);
    if (valorRetornado == JFileChooser.APPROVE_OPTION) {
        File archivoSeleccionado = escogerArchivo.getSelectedFile();
        try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
            String linea;
            int contador = 0;
            while ((linea = br.readLine()) != null) {
                if (option == 0 && contador >= cantidad) {
                    break;
                }
                String[] partes = separarDatos(linea);
                if (partes != null) {
                    String nombre = partes[0];
                    double dpi = Double.parseDouble(partes[1]);
                    String departamento = !"null".equals(partes[2]) ? partes[2] : null;
                    String municipio = !"null".equals(partes[3]) ? partes[3] : null;
                    String lugarVacunacion = !"null".equals(partes[4]) ? partes[4] : null;

                    // Manejo correcto de la conversión a entero
                    int cDosis = 0;
                    try {
                        if (!"null".equals(partes[5])) {
                            cDosis = Integer.parseInt(partes[5]);
                        }
                    } catch (NumberFormatException e) {
                        cDosis = 0; // o algún valor por defecto, o manejar el error de alguna manera
                    }

                    String dVacuna1 = !"null".equals(partes[6]) ? partes[6] : null;
                    String dVacuna2 = !"null".equals(partes[7]) ? partes[7] : null;
                    String dVacuna3 = !"null".equals(partes[8]) ? partes[8] : null;

                    arbol.AgregarNodo(nombre, departamento, municipio, lugarVacunacion, dpi, cDosis, dVacuna1, dVacuna2, dVacuna3);
                    contador++;
                }
            }
            JOptionPane.showMessageDialog(null, "Datos ingresados correctamente en el árbol.");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error en formato de número en el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonSeleccionActionPerformed

    private static String[] separarDatos(String linea) {
    // Expresión regular para separar el nombre, DPI y otros campos
    Pattern pattern = Pattern.compile("(.+?)\\s+(\\d+)(.*)");
    Matcher matcher = pattern.matcher(linea);
    if (matcher.matches()) {
        String nombre = matcher.group(1).trim();
        String dpi = matcher.group(2).trim();
        String[] otrosDatos = matcher.group(3).trim().split("\\s+");

        String departamento = otrosDatos.length > 0 ? otrosDatos[0] : null;
        String municipio = otrosDatos.length > 1 ? otrosDatos[1] : null;
        String lugarVacunacion = otrosDatos.length > 2 ? otrosDatos[2] : null;
        String cDosis = otrosDatos.length > 3 ? otrosDatos[3] : "0"; // No convertir aquí
        String dVacuna1 = otrosDatos.length > 4 ? otrosDatos[4] : null;
        String dVacuna2 = otrosDatos.length > 5 ? otrosDatos[5] : null;
        String dVacuna3 = otrosDatos.length > 6 ? otrosDatos[6] : null;

        return new String[]{nombre, dpi, departamento, municipio, lugarVacunacion, cDosis, dVacuna1, dVacuna2, dVacuna3};
    }
    return null;
}
    
    private void botonMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarActionPerformed
        MostrarTablaBinario tabla = new MostrarTablaBinario();
        System.out.println(" ");
        if (!arbol.EstaVacio()) {
            tabla.setVisible(true);
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Arbol vacio", "Arbol Binario", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_botonMostrarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        double numero;
        if(!arbol.EstaVacio()){
            numero = Double.parseDouble(JOptionPane.showInputDialog(null,"Ingresa el Numero del Nodo a Eliminar...", "Eliminando un Nodo", JOptionPane.QUESTION_MESSAGE));  
                   if (arbol.EliminarNodo(numero)==false){
                                   JOptionPane.showMessageDialog(null, "El Nodo a Eliminar no se encuentra en el Arbol","Nodo no Encontrado",JOptionPane.INFORMATION_MESSAGE);
                               }else{
                                   JOptionPane.showMessageDialog(null, "El Nodo ha sido eliminado del Arbol","Nodo Eliminado",JOptionPane.INFORMATION_MESSAGE);
                           }
        }else{
                                JOptionPane.showMessageDialog(null, "El Arbol esta vacio","Error",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        ActualizarNodoBinario act = new ActualizarNodoBinario();
        act.diferenciador = 0;
        this.setVisible(false);
        act.setVisible(true);
    }//GEN-LAST:event_botonActualizarActionPerformed

    private void botonAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirActionPerformed
        AgregarNodoForm agr = new AgregarNodoForm();
        agr.diferenciador = 0;
        this.setVisible(false);
        agr.setVisible(true);
    }//GEN-LAST:event_botonAñadirActionPerformed

    private void botonSeleccionAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionAVLActionPerformed

        //Opcion ingresar solo unos cuantos nodos o todos los nodos
      String[] options = {"Ingresar cantidad específica", "Ingresar todos los nodos"};
      int option = JOptionPane.showOptionDialog(null,
            "¿Qué acción desea realizar?",
            "Selección de Ingreso",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);

    int cantidad = 0;
    boolean validInput = false;

    if (option == 0) {
        while (!validInput) {
            try {
                String input = JOptionPane.showInputDialog(null, "¿Cuántos nodos desea ingresar?", "Ingreso", JOptionPane.QUESTION_MESSAGE);
                if (input == null) {
                    return;
                }
                cantidad = Integer.parseInt(input);
                validInput = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    JFileChooser escogerArchivo = new JFileChooser();
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto (.txt)", "txt");
    escogerArchivo.setFileFilter(filtro);
    int valorRetornado = escogerArchivo.showOpenDialog(null);
    if (valorRetornado == JFileChooser.APPROVE_OPTION) {
        File archivoSeleccionado = escogerArchivo.getSelectedFile();
        try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
            String linea;
            int contador = 0;
            while ((linea = br.readLine()) != null) {
                if (option == 0 && contador >= cantidad) {
                    break;
                }
                String[] partes = separarDatos(linea);
                if (partes != null) {
                    String nombre = partes[0];
                    double dpi = Double.parseDouble(partes[1]);
                    String departamento = !"null".equals(partes[2]) ? partes[2] : null;
                    String municipio = !"null".equals(partes[3]) ? partes[3] : null;
                    String lugarVacunacion = !"null".equals(partes[4]) ? partes[4] : null;

                    // Manejo correcto de la conversión a entero
                    int cDosis = 0;
                    try {
                        if (!"null".equals(partes[5])) {
                            cDosis = Integer.parseInt(partes[5]);
                        }
                    } catch (NumberFormatException e) {
                        cDosis = 0; // o algún valor por defecto, o manejar el error de alguna manera
                    }

                    String dVacuna1 = !"null".equals(partes[6]) ? partes[6] : null;
                    String dVacuna2 = !"null".equals(partes[7]) ? partes[7] : null;
                    String dVacuna3 = !"null".equals(partes[8]) ? partes[8] : null;

                    arbolAVL.AgregarNodo(nombre, departamento, municipio, lugarVacunacion, dpi, cDosis, dVacuna1, dVacuna2, dVacuna3);
                    contador++;
                }
            }
            JOptionPane.showMessageDialog(null, "Datos ingresados correctamente en el árbol.");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error en formato de número en el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }      
    }//GEN-LAST:event_botonSeleccionAVLActionPerformed
 
         /*private void botonBuscarAVLActionPerformed(java.awt.event.ActionEvent evt) {                                               
       double numero;
        if (!arbolAVL.EstaVacio()){
                            numero = Double.parseDouble(JOptionPane.showInputDialog(null,"Ingrese el numero del nodo a buscar...","Buscando un Nodo",JOptionPane.QUESTION_MESSAGE));
                            NodoPersona tmp;
                            tmp = arbolAVL.BuscarNodo(numero);
                            if (tmp==null){
                                JOptionPane.showMessageDialog(null,"El nodo buscado no se encuentra en el arbol","Nodo No Encontrado",JOptionPane.INFORMATION_MESSAGE);
                            }else{
                                System.out.println("Persona encontrada, sus datos son: " + tmp.getNombre() + ", DPI:  " + df.format(tmp.getDpi()));
                            }
                        }else{
                            JOptionPane.showMessageDialog(null,"El Arbol esta vacio","Error",JOptionPane.INFORMATION_MESSAGE);
                        }
    }          */
    
    private void botonMostrarAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarAVLActionPerformed
       MostrarTablaAVL tablaAVL = new MostrarTablaAVL();
        System.out.println(" ");
        if (!arbolAVL.EstaVacio()) {
            tablaAVL.setVisible(true);
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Arbol vacio", "Arbol Binario", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonMostrarAVLActionPerformed

    private void botonEliminarAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarAVLActionPerformed
        double numero;
        if(!arbolAVL.EstaVacio()){
            numero = Double.parseDouble(JOptionPane.showInputDialog(null,"Ingresa el Numero del Nodo a Eliminar...", "Eliminando un Nodo", JOptionPane.QUESTION_MESSAGE));  
                   if (arbolAVL.EliminarNodo(numero)==false){
                                   JOptionPane.showMessageDialog(null, "El Nodo a Eliminar no se encuentra en el Arbol","Nodo no Encontrado",JOptionPane.INFORMATION_MESSAGE);
                               }else{
                                   JOptionPane.showMessageDialog(null, "El Nodo ha sido eliminado del Arbol","Nodo Eliminado",JOptionPane.INFORMATION_MESSAGE);
                           }
        }else{
                                JOptionPane.showMessageDialog(null, "El Arbol esta vacio","Error",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_botonEliminarAVLActionPerformed

    private void botonAñadirAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirAVLActionPerformed
       AgregarNodoForm agr = new AgregarNodoForm();
        agr.diferenciador = 1;
        this.setVisible(false);
        agr.setVisible(true);
    }//GEN-LAST:event_botonAñadirAVLActionPerformed

    private void botonActualizarAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarAVLActionPerformed
        ActualizarNodoBinario act = new ActualizarNodoBinario();
        act.diferenciador = 1;
        this.setVisible(false);
        act.setVisible(true);
    }//GEN-LAST:event_botonActualizarAVLActionPerformed

    private void botonGuardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarArchivoActionPerformed
        String[] options = {"Ingresar en PreOrden", "Ingresar en InOrden", "Ingresar en PostOrden"};
        int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de Ingreso a archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        
        switch(option){
            case 0:
                arbol.guardarEnArchivoPreOrden("arbol_binario_preorden.txt");
                break;
                case 1:
                arbol.guardarEnArchivoInOrden("arbol_binario_inorden.txt");
                break;
                case 2  :
                arbol.guardarEnArchivoPostOrden("arbol_binario_postorden.txt");
                break;
        }
    }//GEN-LAST:event_botonGuardarArchivoActionPerformed

    private void botonGuardarArchivoAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarArchivoAVLActionPerformed
       String[] options = {"Ingresar en PreOrden", "Ingresar en InOrden", "Ingresar en PostOrden"};
        int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de Ingreso a archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        
        switch(option){
            case 0:
                arbolAVL.guardarEnArchivoPreOrden("arbolAVL_preorden.txt");
                break;
                case 1:
                arbolAVL.guardarEnArchivoInOrden("arbolAVL_inorden.txt");
                break;
                case 2  :
                arbolAVL.guardarEnArchivoPostOrden("arbolAVL_postorden.txt");
                break;
        }           
    }//GEN-LAST:event_botonGuardarArchivoAVLActionPerformed

    private void botonEncriptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEncriptarActionPerformed
        String ruta = null;
        File archivo;

                String[] options = {"Encriptar", "Desencriptar"};
                int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de accion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        
        switch(option){
            case 0:
               String[]options1 = {"Encriptar Archivo PreOrden", "Encriptar Archivo InOrden", "Encriptar Archivo PostOrden"};
                int option1 = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de encripcion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options1,
                options1[0]);
                
                switch(option1){
                    case 0: //Encriptar binario preorden
                        ruta = "arbol_binario_preorden.txt";  
                        archivo = new File(ruta);
                        {
                    try {
                    encriptarArchivo(archivo);  
                    JOptionPane.showMessageDialog(null, "Encripcion Exitosa", "Encripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                    case 1: //Encriptar binario inorden
                        ruta = "arbol_binario_inorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    encriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Encripcion Exitosa", "Encripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                    case 2: //Encriptar binario postorden
                        ruta = "arbol_binario_postorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    encriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Encripcion Exitosa", "Encripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                }
                break;
                
            case 1:
                String[] options2 = {"Desencriptar Archivo PreOrden", "Desencriptar Archivo InOrden", "Desencriptar Archivo PostOrden"};
                int option2 = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de encripcion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options2,
                options2[0]);
                
                switch(option2){
                    case 0: //Desencriptar binario postorden
                        ruta = "arbol_binario_preorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    desencriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Desencripcion Exitosa", "Desencripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                        case 1: //Desencriptar binario inorden
                        ruta = "arbol_binario_inorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    desencriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Desencripcion Exitosa", "Desencripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                        case 2: //Desencriptar binario postorden
                        ruta = "arbol_binario_postorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    desencriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Desencripcion Exitosa", "Desencripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                }
                break;   
        }
    }//GEN-LAST:event_botonEncriptarActionPerformed

    private void botonEncriptarAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEncriptarAVLActionPerformed
        String ruta = null;
        File archivo;

                String[] options = {"Encriptar", "Desencriptar"};
                int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de accion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        
        switch(option){
            case 0:
               String[]options1 = {"Encriptar Archivo PreOrden", "Encriptar Archivo InOrden", "Encriptar Archivo PostOrden"};
                int option1 = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de encripcion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options1,
                options1[0]);
                
                switch(option1){
                    case 0: //Encriptar binario preorden
                        ruta = "arbolAVL_preorden.txt";  
                        archivo = new File(ruta);
                        {
                    try {
                    encriptarArchivo(archivo);  
                    JOptionPane.showMessageDialog(null, "Encripcion Exitosa", "Encripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                    case 1: //Encriptar binario inorden
                        ruta = "arbolAVL_inorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    encriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Encripcion Exitosa", "Encripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                    case 2: //Encriptar binario postorden
                        ruta = "arbolAVL_postorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    encriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Encripcion Exitosa", "Encripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                }
                break;
                
            case 1:
                String[] options2 = {"Desencriptar Archivo PreOrden", "Desencriptar Archivo InOrden", "Desencriptar Archivo PostOrden"};
                int option2 = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de encripcion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options2,
                options2[0]);
                
                switch(option2){
                    case 0: //Desencriptar binario preorden
                        ruta = "arbolAVL_preorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    desencriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Desencripcion Exitosa", "Desencripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                        case 1: //Desencriptar binario inorden
                        ruta = "arbolAVL_inorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    desencriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Desencripcion Exitosa", "Desencripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                        case 2: //Desencriptar binario postorden
                        ruta = "arbolAVL_postorden.txt";
                        archivo = new File(ruta);
                        {
                    try {
                    desencriptarArchivo(archivo);
                    JOptionPane.showMessageDialog(null, "Desencripcion Exitosa", "Desencripcion", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                    Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                        break;
                }
                break;   
        }
    }//GEN-LAST:event_botonEncriptarAVLActionPerformed

    private void botonComprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonComprimirActionPerformed
        Compresor comp = new Compresor();
        Decompresor decomp = new Decompresor();
        String ruta = null;

         String[] options = {"Comprimir", "Descomprimir"};
                int option = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de accion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        
               switch(option){
                   case 0:
                       
         String[] options1 = {"Comprimir Archivo PreOrden", "Comprimir Archivo InOrden", "Comprimir Archivo PostOrden"};
                int option1 = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de accion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options1,
                options1[0]);
        
                switch(option1){
                    case 0:
                        ruta = "arbol_binario_preorden.txt";
                        comp.comprimirArchivo(ruta);
                        JOptionPane.showMessageDialog(null, "Compresion Exitosa", "Compresion", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case 1:
                        ruta = "arbol_binario_inorden.txt";
                        comp.comprimirArchivo(ruta);
                        JOptionPane.showMessageDialog(null, "Compresion Exitosa", "Compresion", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case 2:
                        ruta = "arbol_binario_postorden.txt";
                        comp.comprimirArchivo(ruta);
                        JOptionPane.showMessageDialog(null, "Compresion Exitosa", "Compresion", JOptionPane.INFORMATION_MESSAGE);
                        break;
                }
                
                break;
                
                   case 1:
                      
                String[] options2 = {"Descomprimir Archivo PreOrden", "Descomprimir Archivo InOrden", "Descomprimir Archivo PostOrden"};
                int option2 = JOptionPane.showOptionDialog(null,
                "¿Qué acción desea realizar?",
                "Selección de accion de archivo",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options2,
                options2[0]);
        
                switch(option2){
                    case 0:
                        ruta = "arbol_binario_preorden.txt";
                        decomp.descomprimirArchivo(ruta);
                        JOptionPane.showMessageDialog(null, "Descompresion Exitosa", "Descompresion", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case 1:
                        ruta = "arbol_binario_inorden.txt";
                        decomp.descomprimirArchivo(ruta);
                        JOptionPane.showMessageDialog(null, "Descompresion Exitosa", "Descompresion", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case 2:
                        ruta = "arbol_binario_postorden.txt";
                        decomp.descomprimirArchivo(ruta);
                        JOptionPane.showMessageDialog(null, "Descompresion Exitosa", "Descompresion", JOptionPane.INFORMATION_MESSAGE);
                        break;
                }
                       
                       break;
               }
    }//GEN-LAST:event_botonComprimirActionPerformed

    private void botonComprimirAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonComprimirAVLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonComprimirAVLActionPerformed

    public static void encriptarArchivo(File archivo) throws IOException {
        Path path = Paths.get(archivo.getAbsolutePath());
        String contenido = new String(Files.readAllBytes(path));
        String contenidoEncriptado = encriptar(contenido);
        Files.write(path, contenidoEncriptado.getBytes());
    }
    
    private static String encriptar(String texto) {
        StringBuilder resultado = new StringBuilder();
        for (char caracter : texto.toCharArray()) {
            resultado.append((char) (caracter + 10));
        }
        return resultado.toString();
    }
    
    public static void desencriptarArchivo(File archivo) throws IOException {
        Path path = Paths.get(archivo.getAbsolutePath());
        String contenido = new String(Files.readAllBytes(path));
        String contenidoDesencriptado = desencriptar(contenido);
        Files.write(path, contenidoDesencriptado.getBytes());
    }
    
    private static String desencriptar(String texto) {
        StringBuilder resultado = new StringBuilder();
        for (char caracter : texto.toCharArray()) {
            resultado.append((char) (caracter - 10));
        }
        return resultado.toString();
    }
    
     /*private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        double numero;
        if (!arbol.EstaVacio()){
                            numero = Double.parseDouble(JOptionPane.showInputDialog(null,"Ingrese el numero del nodo a buscar...","Buscando un Nodo",JOptionPane.QUESTION_MESSAGE));
                            NodoPersona tmp;
                            tmp = arbol.BuscarNodo(numero);
                            if (tmp==null){
                                JOptionPane.showMessageDialog(null,"El nodo buscado no se encuentra en el arbol","Nodo No Encontrado",JOptionPane.INFORMATION_MESSAGE);
                            }else{
                                System.out.println("Persona encontrada, sus datos son: " + tmp.getNombre() + ", DPI:  " + df.format(tmp.getDpi()));
                            }
                        }else{
                            JOptionPane.showMessageDialog(null,"El Arbol esta vacio","Error",JOptionPane.INFORMATION_MESSAGE);
                        }
    } */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonActualizarAVL;
    private javax.swing.JButton botonAñadir;
    private javax.swing.JButton botonAñadirAVL;
    private javax.swing.JButton botonComprimir;
    private javax.swing.JButton botonComprimirAVL;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonEliminarAVL;
    private javax.swing.JButton botonEncriptar;
    private javax.swing.JButton botonEncriptarAVL;
    private javax.swing.JButton botonGuardarArchivo;
    private javax.swing.JButton botonGuardarArchivoAVL;
    private javax.swing.JButton botonMostrar;
    private javax.swing.JButton botonMostrarAVL;
    private javax.swing.JButton botonSeleccion;
    private javax.swing.JButton botonSeleccionAVL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelFondo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    // End of variables declaration//GEN-END:variables
}
